{"version":3,"sources":["components/todoForm/index.js","components/toDo/index.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","_ref","addTodo","_useState","useState","_useState2","Object","slicedToArray","value","setValue","react_default","a","createElement","onSubmit","e","preventDefault","type","className","onChange","target","Todo","todo","text","App","todos","setTodos","href","map","index","key","newTodos","concat","toConsumableArray","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAGe,SAASA,EAATC,GAA+B,IAAXC,EAAWD,EAAXC,QAAWC,EAChBC,mBAAS,IADOC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnCK,EADmCH,EAAA,GAC5BI,EAD4BJ,EAAA,GAY1C,OACEK,EAAAC,EAAAC,cAAA,QAAMC,SARa,SAAAC,GACnBA,EAAEC,iBACGP,IACLN,EAAQM,GACRC,EAAS,OAKPC,EAAAC,EAAAC,cAAA,SACEI,KAAK,OACLC,UAAU,QACVT,MAAOA,EACPU,SAAU,SAAAJ,GAAC,OAAIL,EAASK,EAAEK,OAAOX,WCnB5B,SAASY,EAATnB,GAAwB,IAARoB,EAAQpB,EAARoB,KAC3B,OACIX,EAAAC,EAAAC,cAAA,OAAKK,UAAU,QACVI,EAAKC,MCkCHC,MAhCf,WAAe,IAAApB,EACaC,mBAAS,CACjC,CAAEkB,KAAM,qBACR,CAAEA,KAAM,yBACR,CAAEA,KAAM,gCAJGjB,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACNqB,EADMnB,EAAA,GACCoB,EADDpB,EAAA,GAab,OACEK,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,OAAKK,UAAU,aACfP,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,kEACAF,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGc,KAAK,4FAAR,mEACAF,EAAMG,IAAI,SAACN,EAAMO,GAAP,OACTlB,EAAAC,EAAAC,cAACQ,EAAD,CACES,IAAKD,EACLA,MAAOA,EACPP,KAAMA,MAGVX,EAAAC,EAAAC,cAACZ,EAAD,CAAUE,QAnBA,SAAAoB,GACd,IAAMQ,EAAQ,GAAAC,OAAAzB,OAAA0B,EAAA,EAAA1B,CAAOkB,GAAP,CAAc,CAAEF,UAC9BG,EAASK,SCJOG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.20958d83.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\n\nexport default function TodoForm({ addTodo }) {\n    const [value, setValue] = useState(\"\");\n\n    // console.log(todos)\n  \n    const handleSubmit = e => {\n      e.preventDefault();\n      if (!value) return;\n      addTodo(value);\n      setValue(\"\");\n    };\n  \n    return (\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"input\"\n          value={value}\n          onChange={e => setValue(e.target.value)}\n        />\n      </form>\n    )\n  }\n","import React from 'react';\n\nexport default function Todo({ todo }) {\n    return(\n        <div className=\"todo\">\n            {todo.text}\n        </div>\n    )\n}","import React, { useState } from 'react';\nimport './App.css';\n\n// Consumers of state\nimport TodoForm from './components/todoForm';\nimport Todo from './components/toDo';\n\nfunction App() {\n  const [todos, setTodos] = useState([\n    { text: \"Learn about React\" },\n    { text: \"Meet friend for lunch\" },\n    { text: \"Build really cool todo app\" }\n  ]);\n\n  const addTodo = text => {\n    const newTodos = [...todos, { text }];\n    setTodos(newTodos);\n  }\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"todo-list\">\n      <h1>React hooks CRUD ToDo Example</h1>\n      <h3>Followed Tutorial from Scotch.io + structure cleanup</h3>\n      <p><a href=\"https://scotch.io/tutorials/build-a-react-to-do-app-with-react-hooks-no-class-components\">Build a React To-Do App with React Hooks (No Class Components)</a></p>\n        {todos.map((todo, index) => (\n          <Todo\n            key={index}\n            index={index}\n            todo={todo}\n          />\n        ))}\n        <TodoForm addTodo={addTodo} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}